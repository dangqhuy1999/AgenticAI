##########

# C√°ch 1 ‚Äî Global install (x√†i m·ªçi project)

`curl -Ls https://astral.sh/uv/install.sh | sh`

Xong test:

`uv --version`

‚Üí Sau ƒë√≥ v√†o folder project:

```
uv venv .venv
source .venv/bin/activate
uv pip install -r requirements.txt
```

## C√†i th∆∞ vi·ªán

`uv pip install requests pandas`

#Ghi v√†o requirements.txt

`uv pip freeze > requirements.txt`

# Update package

`uv pip install --upgrade package-name`




######################
N·∫øu ban ƒë·∫ßu d·ª± √°n ch∆∞a c√≥ uv.lock, th√¨ c·∫ßn c√≥ requirements.txt ƒë·ªÉ uv bi·∫øt ph·∫£i lock nh·ªØng g√¨.
‚úÖ C√°ch t·∫°o uv.lock t·ª´ requirements.txt:

    Em t·∫°o file requirements.txt nh∆∞ b√¨nh th∆∞·ªùng:

requests
pandas
openai

    R·ªìi ch·∫°y l·ªánh:

uv pip compile

üì¶ N√≥ s·∫Ω ƒë·ªçc requirements.txt v√† t·∫°o ra file uv.lock v·ªõi to√†n b·ªô dependency tree v√† phi√™n b·∫£n c·ª• th·ªÉ, y nh∆∞ poetry.lock, package-lock.json,...
üí° Sau ƒë√≥:

    Khi dev th√™m/thay lib ‚Üí update requirements.txt

    R·ªìi ch·∫°y l·∫°i:

    uv pip compile

    L√† uv.lock ƒë∆∞·ª£c c·∫≠p nh·∫≠t l·∫°i theo requirements.txt.

üì¶ Khi deploy ho·∫∑c clone ·ªü m√°y kh√°c:

Ch·ªâ c·∫ßn:

uv venv .venv
source .venv/bin/activate
uv pip install --no-deps --frozen

    ‚úÖ Kh√¥ng c·∫ßn requirements.txt n·ªØa, ch·ªâ c·∫ßn uv.lock ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng phi√™n b·∫£n!

################



Ki·ªÉm tra xem c√≥ requirements.txt ch∆∞a?

`uv pip compile s·∫Ω fail n·∫øu kh√¥ng c√≥ requirements.txt.`

    Em c·∫ßn file requirements.txt ·ªü c√πng th∆∞ m·ª•c v·ªõi n∆°i em ch·∫°y l·ªánh ƒë√≥.


N·∫øu v·∫´n l·ªói, th·ª≠ th√™m --output-file

`uv pip compile --output-file=uv.lock`


####
    (T√πy ch·ªçn) Generate uv.lock:

uv pip compile requirements.txt --generate-uv-lock



##################



Th√¨ em d√πng shell function t·ª± ƒë·ªông h√≥a nh∆∞ sau:
‚úÖ B∆∞·ªõc 1: Th√™m function n√†y v√†o .bashrc ho·∫∑c .zshrc

mkpy() {
  proj="$1"
  mkdir -p "$proj" && cd "$proj" || exit
  uv venv .venv
  source .venv/bin/activate
  uv pip install requests
  echo "import requests" > main.py
  echo "requests" > requirements.txt
  uv pip install -r requirements.txt
  uv pip compile requirements.txt --output-file uv.lock

  echo "‚úÖ Project $proj created with uv, .venv, main.py, requirements.txt and uv.lock"
}


    R·ªìi reload shell:

source ~/.bashrc  # ho·∫∑c ~/.zshrc n·∫øu d√πng zsh


####################

### GIT CONFIG 

  301  git init 
  302  git git config --global user.name "XXX"
  303  git  config --global user.name "XXX"
  304  git config --global user.email "XXX@gXXX"
  305  git git remote add origin "git@github.com:dangqhuy1999/AgenticAI.git"
  306  git checkout -b main
  307  git pull origin main
  308  ls ~/.ssh
  309  ssh-keygen -t ed25519 -C "XXX@XXX"
  310  ls .ssh
  311  ls -la
  312  ls ~/.ssh
  313  cat ~/.ssh/id_ed25519.pub
  314  ssh -T git@github.com
  315  git config --global core.sshCommand "ssh -i ~/.ssh/id_ed25519"
  316  git pull origin main
  317  git add .
  318  git commit -m "f1"
  319  git push -u origin main
  320  history

#####################################
#####################################
BUILD SERVICE

üéØ M·ª•c ti√™u:

    C√≥ 1 file shell script, v√≠ d·ª•: /home/ubuntu/myscript.sh

    Mu·ªën ch·∫°y n√≥ d∆∞·ªõi n·ªÅn nh∆∞ service, lu√¥n ch·∫°y t·ª´ l√∫c boot m√°y

‚úÖ B∆∞·ªõc 1: ƒê·∫£m b·∫£o script c√≥ quy·ªÅn ch·∫°y

chmod +x /home/ubuntu/myscript.sh

‚úÖ B∆∞·ªõc 2: T·∫°o file service cho systemd

T·∫°o file m·ªõi:

sudo nano /etc/systemd/system/myscript.service

D√°n n·ªôi dung v√≠ d·ª• sau:

[Unit]
Description=My Custom Script Service
After=network.target

[Service]
ExecStart=/home/ubuntu/myscript.sh
Restart=always
RestartSec=5
User=ubuntu
WorkingDirectory=/home/ubuntu
StandardOutput=append:/var/log/myscript.log
StandardError=append:/var/log/myscript.err.log

[Install]
WantedBy=multi-user.target

    ‚ö†Ô∏è Nh·ªõ ƒë·ªïi User=ubuntu th√†nh user b·∫°n ƒëang d√πng n·∫øu kh√°c.

‚úÖ B∆∞·ªõc 3: Reload systemd, enable v√† start service

sudo systemctl daemon-reexec
sudo systemctl daemon-reload
sudo systemctl enable myscript.service
sudo systemctl start myscript.service

‚úÖ B∆∞·ªõc 4: Ki·ªÉm tra tr·∫°ng th√°i

sudo systemctl status myscript.service

Xem log n·∫øu c·∫ßn:

journalctl -u myscript.service -f

üí° Tips:

    N·∫øu script c·∫ßn ch·∫°y trong virtualenv hay d√πng Docker, b·∫°n c√≥ th·ªÉ g·ªçi c√°c l·ªánh ƒë√≥ trong ExecStart ho·∫∑c g·ªçi m·ªôt script wrapper.

    N·∫øu script c√≥ sleep / loop, nh·ªõ c√≥ Restart=always ƒë·ªÉ service kh√¥ng d·ª´ng.
